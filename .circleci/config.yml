version: 2.1

orbs:
  slack: circleci/slack@4.9.3

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: 03-cloud-devops
          template: basic_fail_1
  
  install_ansible:
    description: Install Ansible 
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_awscli:
    description: Install Aws Cli
    steps:
      - run:
          name: Install AWS Cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string 
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
             aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
             aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
             aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here  
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/S3PHD4fDhjYCxQmN9BkJ9r/migration_<<parameters.workflow_id>>")
            if(($SUCCESS==1)); 
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            fi
            
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build Back-end
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
             # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]  
      - run:
          name: Test front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
      - notify_on_failure

                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: test back-end
          command: |
             # Your code here
             cd backend
             npm install
             npm run test
      - notify_on_failure

  scan-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout 
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
      - notify_on_failure

  scan-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical
      - notify_on_failure

  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name = tag:project, Values=udapeople" --output text >> .circleci/ansible/inventory.txt
      - run:
          name: confirm PublicIpAddress
          command: |
            ls ~/project/.circleci
            ls ~/project/.circleci/ansible
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment # Here's where you will add some code to rollback on failure  



  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e1:08:a0:c5:07:2a:65:ff:23:64:f0:7c:19:9f:ad:69"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip aws-cli      
      - run:
          name: Configure server
          command: |         
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            cat inventory.txt
      #- run:
       #   name: Install node exporter
       #   command: |
       #     cd .circleci/ansible
       #     ansible-playbook -i inventory.txt configure-node-exporter.ymlL
      - destroy_environment 




  # configure-infrastructure:
  #   docker:
  #     - image: cimg/base:stable    # Docker image here that supports Ansible
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["e1:08:a0:c5:07:2a:65:ff:23:64:f0:7c:19:9f:ad:69"] 
  #     - attach_workspace:
  #         at: ~/
  #     - install_ansible
  #     - install_awscli
  #     # - run:
  #     #     name: Install dependencies
  #     #     command: |
  #           # apk add --update nodejs ansible tar npm curl gzip aws-cli
  #     # - run: pip install aws-cli
  #     - run:
  #         name: confirm inventory iP address
  #         command: |
  #           cat ~/project/.circleci/ansible/inventory.txt
  #     - run:
  #         name: Configure server
  #         command: |
  #             cd .circleci/ansible
  #             cat inventory.txt
  #             ansible-playbook -i inventory.txt configure-server.yml
  #     - destroy_environment       # Here's where you will add some code to rollback on failure  










# configure-infrastructure:
#     docker:
#       - image: python:3.7-alpine3.16
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints:
#             - 'ea:16:8b:35:2f:09:0d:15:05:80:b0:b1:a2:cd:21:41'
#       - run:
#           name: Install dependencies
#               echo ENVIRONMENT=production > backend/.env
#               echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
#               echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
#               echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
#               echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
#               echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
#               echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
#               echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
#               echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
#               echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
#               cat backend/.env
#               cd .circleci/ansible
#               ansible-playbook -i inventory.txt configure-server.yml



  run-migrations:
    docker:
      - image: circleci/node:13.8.0    # Docker image here that supports NodeJS
    steps:
      - checkout
      - install_awscli
      - restore_cache:               #1
          keys: [backend-build]
      - attach_workspace:             #2
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                  # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                  # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                  curl --insecure https://kvdb.io/S3PHD4fDhjYCxQmN9BkJ9r/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
              fi
      - run:
          name: confirming migration_dump text
          command: |
            cat ~/project/backend/migrations_dump.txt
            echo ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_environment           # Here's where you will add some code to rollback on failure    
      - revert-migrations


  deploy-frontend:
    docker:
      - image: python:3.10-alpine3.16       #1    # Docker image here that supports AWS CLI
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["e1:08:a0:c5:07:2a:65:ff:23:64:f0:7c:19:9f:ad:69"] 
      - attach_workspace:
          at: ~/
      # - run: yum install -y npm 
      # - install_awscli   #2
      # - install_nodejs   #3
      # - install_ansible   #4
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs ansible tar npm curl gzip aws-cli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name = tag:project, Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            # sudo npm install -g npm@latest #1
            # rm -rf node_modules          #2
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment # Here's where you will add some code to rollback on failure 
      - revert-migrations


  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16 # cimg/base:stable     # Docker image here that supports Ansible
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["e1:08:a0:c5:07:2a:65:ff:23:64:f0:7c:19:9f:ad:69"]  # Add ssh keys with fingerprint
      - attach_workspace:                                                    # attach workspace
          at: ~/
       # - install_awscli #1
       # - install_nodejs  #2
       # - install_ansible  #3
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs ansible tar npm curl gzip aws-cli
      - run:
          name: Deploy backend
          command: |
            # cd backend

            # npm i
            # npm run build
            # cd ..

            # # Zip the directory
            # cd .circleci/ansible
            # mkdir files
            # cd files
            # tar -C ../../../backend -czvf artifact.tar.gz .
            # cd ../

            # echo "Contents  of the inventory.txt file is ----------"
            # cat inventory.txt
            # ansible-playbook -i inventory.txt deploy-backend.yml

            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment # Here's where you will add some code to rollback on failure 
      - revert-migrations # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: cimg/base:stable     # Lightweight Docker image 
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Get backend url and do Backend Smoke Test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name = tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo "${BACKEND_IP}"
            
            # Fetch and prepare the BACKEND_IP env var

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
              then
                  exit 0
              else
                  exit 1
              fi
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
              then
                exit 0
              else
                exit 1
            fi
      - destroy_environment # Here's where you will add some code to rollback on failure 
      - revert-migrations # Here's where you will add some code to rollback on failure 

      
  cloudfront-update:
    docker: 
      - image: cimg/base:stable     # Docker image here that supports AWS CLI
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies / save old workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)

            echo "Old workflow ID: ${OLD_WORKFLOW_ID}"
            curl https://kvdb.io/S3PHD4fDhjYCxQmN9BkJ9r/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
           aws cloudformation deploy \
           --template-file .circleci/files/cloudfront.yml  \
           --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
           --stack-name InitialStack
      - destroy_environment
      - revert-migrations

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout 
      - install_awscli
      - install_nodejs
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID

            export STACKS=($(aws cloudformation list-stacks  \
            --query "StackSummaries[*].StackName"  \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            
            echo Stack names: "${STACKS[@]}"

            export OldWorkflowID=$(curl --insecure https://kvdb.io/S3PHD4fDhjYCxQmN9BkJ9r/old_workflow_id)
            echo OldWorkflowID: "${OldWorkflowID}"
                 
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl --insecure https://kvdb.io/S3PHD4fDhjYCxQmN9BkJ9r/old_workflow_id)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CircleciWorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"

            export STACKS=($(aws cloudformation list-stacks  \
            --query "StackSummaries[*].StackName"  \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            
            echo Stack names: "${STACKS[@]}"

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}]" != "${OldWorkflowID}" ]]
            then
              echo "--------------------Delete Confirmed-------------------------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo"---------------------cannot cleanup----------------------------"
            fi
      # - destroy_environment
      # - revert-migrations        # Here's where you will add some code to rollback on failure   

  notify_on_success:
    docker:
      - image: cimg/base:2021.04
    steps:
      - slack/notify:
          event: pass
          channel: 03-cloud-devops
          template: basic_success_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
           requires: [build-backend]
      - scan-frontend:
           requires: [build-frontend]
      - deploy-infrastructure:
           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
           filters:
             branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
           requires: [run-migrations]
      - deploy-backend:
           requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      - notify_on_success:
            requires:
              - cleanup